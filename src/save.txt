/*



        // atomic model --> [[-0.7007025392651327,0.47105731750112856,-0.2199809608751071],[-0.9741237491118016,-0.8959914615540066,0.40256374850646726],[0.016974505951858898,-0.11838072403060895,-0.8796658538495254]]
        
        // atomic battle --> [[1.2928484184302347,-0.9306707586663387,0.534831604554153],[-2.883564440055273,-3.5505454311317086,-2.865369144984893],[3.3636400366477766,-1.010109751475552,-1.1422993848397933]]
        
        // stable life --> [[0.6120252112539699,0.11576248578180648,0.7269839323506462,-0.17241496387978072,-0.11653762500440257,0.40903298242563935],[0.7379837289639739,0.7130202515162858,0.5469483762866854,-0.5783416845417815,-0.40888888358496,0.6183137162214716],[-0.5859487797624325,-0.07579647228898567,-0.9674073992347916,0.933550958612893,-0.12731442146026728,0.517152632561007],[0.7611516238361542,0.25421512483959985,-0.9931041588765233,0.29512429766003434,0.6760300283172116,0.5834461989611559],[0.7238106136343019,0.6813365828622331,0.4761213579998378,-0.6256763300102413,-0.03994705343541671,0.07005616835304052],[-0.7101076030528062,0.649332879990312,-0.36130269637656687,-0.5943818826106955,0.18187855689172983,0.4721288911620545]]
        
        // bugs --> [[-0.9244612645787442,0.5602116774591241,0.1656709566399206,0.35207128484469763,0.0016536042755319613,-0.388640549588374],[-0.4084490484065162,0.3431750965386935,0.3161767200902368,-0.06224525383352608,-0.3013065968461417,0.6837770853908389],[-0.038608083594506404,-0.3529562965453632,-0.6719629763329791,-0.6605045047039262,-0.34019509796796044,0.4996470817885963],[0.28558595390658104,-0.4312020952778517,-0.3741322193661256,0.5676540885865222,-0.47869900422942635,0.5757375393318331],[-0.1948843188348044,0.22075538615948842,0.40300519098810605,-0.4770137247206221,-0.15619215611866633,-0.2702287551005558],[0.5160910965918872,0.40121774025176427,-0.2191273992365681,-0.519284027509316,-0.16613287778550578,-0.9814025561009232]]
        
        // () spider --> [[-0.04519856378443743,0.046523651911980046,-0.48203283775974803,-0.17700679699386157,-0.12219825829124886,-0.47882214586613614],[-0.22072331484574548,-0.9801580575272513,0.5936960380475278,-0.9239349954002862,0.4256871829231712,-0.4701309240682954],[-0.5689173317383576,-0.23124192040415714,0.7790803228992966,0.9246746222695701,-0.7004217619695914,0.9358451737008235],[0.19631845568728012,-0.9388216945891465,0.2176487494139563,-0.2696757899090092,-0.4037812846356723,-0.741995051336283],[-0.2232687340676338,0.12860818403616658,0.11518561620248002,-0.1548031690500271,-0.19054591185229341,0.26897875393742465],[-0.08398063416220358,0.242848940398249,0.4626112742230126,0.3288380039893335,-0.0577541797172243,-0.5376100748430694]]
        
        // () splitcells --> [[-0.931095622610767,0.542100569968107,0.07338530275774957],[0.375033374897789,-0.7353994615993167,0.8038157143032514],[0.20617994419253804,-0.9892264869536405,0.15636213378198827]]
        
        // cute atom --> [[0.6326935996377578,0.40361372715894994,0.8192767012359541,-0.9182159146281297,0.0681835208802708,-0.7175238962310222],[0.06357267936029931,0.6186569661203389,-0.7340258610481105,0.08332071413088205,0.3283693815224984,-0.1140298081839708],[-0.44877729017252665,0.5356387974711025,0.552520815955992,0.9509618240984379,0.8416361405787911,0.7327665833614243],[0.9266530880030746,0.6799814667262813,0.7462046128585125,-0.19312252122553764,0.7491253383028829,0.9432850481001784],[0.1785470708435457,0.05481002608947172,-0.5783610007240698,-0.5801840953041353,-0.8421327877431786,0.06709043040613505],[-0.20396662384631314,-0.16058241762040337,-0.26234428492209316,-0.1216368028266328,-0.757998182451824,0.036890486427103575]]
        
        // ☆☆☆ oscillators --> 
        
        [[-0.7626315688653378,0.6989100914593647,-0.893948127964729,0.09575136811701546],[-0.8007567894455456,0.4076793509876371,0.7090896288182105,-0.5581669002988399],[0.8043453737417021,0.3423293732636705,-0.8001336262654073,0.21892170445680703],[-0.5623019360113037,0.5566366643045328,-0.35742695906797506,-0.8944967756929114]]
        
        [[0.39474223361614014,-0.5097661599793564,0.5419171540010956,-0.7051799610539233],[0.9738588596455231,-0.8034721014683059,-0.3352077746853852,-0.037757345377592344],[0.5634491202732157,0.7245215024180824,-0.19402946202888582,-0.8838902215506081],[-0.971566101226335,0.4663135323761538,0.5039519002410118,0.07868240879602428]]
        
        [[0.6691638378668578,-0.19578462556479304,0.8720081716674253,-0.9955128338252077],[-0.37449270569016857,-0.4914541080517254,0.9053437438954295,0.6587477686544561],[-0.24502342281419365,0.6235021308402056,-0.8903003619960157,0.6136434220824083],[0.2764461970784269,0.9171010484385418,-0.6455296321132065,-0.13849217586780016]]
        
        [[0.46910841001519854,0.21710396891458394,0.39998998208969905,-0.17099755733176059],[0.482447956625633,-0.8151555653147109,0.5029476676459503,0.42330512581557755],[0.8652903070311049,-0.5223676210292263,-0.9743769609879163,0.31789936761335635],[-0.8429449201311723,-0.48174333666642655,-0.4012310254328284,-0.442794492814639]]
        
        ☆ [[0.2036769408457033,0.9898788393481217,-0.04979607740020464,0.8151489340329898,-0.22318364438075733,0.7067149442650034],[-0.8622773506370343,-0.16487011202600366,0.2763383016949219,-0.39724838304358867,-0.8814852523394121,-0.9663600267231907],[-0.4779788761343524,-0.9018475319620647,0.47748326079398495,-0.8262732851340386,-0.3981230499607742,-0.10930582023670832],[-0.03873341902046645,-0.31744876659151133,-0.718049995361183,0.16708848453789615,0.3428669841370544,0.886567154528282],[0.1608564388544096,-0.08440039970598123,-0.06847844403537318,0.8030419096042727,0.4609558982441575,-0.0338310837913256],[0.6944575535905297,0.835697719539517,0.33970441797530704,0.275073977852863,0.24622764418961385,-0.3302563642654057]]
        
        ☆☆☆ [[0.3424917974074637,-0.34930799596464784,0.3548724819672413,0.3976379866825952,0.2820004018327019,0.3819007211052363],[0.03602084124323257,-0.237672647227762,0.3194886888633932,-0.6391383103768179,0.16772332928817824,0.4586195212202877],[0.4028250606822654,0.2805991560798431,0.47372507371872863,0.46692368582500565,0.2538742481744757,0.19995782648171756],[-0.6545660478169739,-0.45227578775872,0.5748178620671103,-0.08169267274234482,-0.13543417506799404,-0.5023547561228248],[-0.42722916260340354,0.6203391135348757,-0.15440846764252503,-0.44088413262749804,0.019573680542387395,0.6196616068580738],[-0.36488119160569643,-0.04669796753883293,-0.4871183877795052,-0.01635982466936714,-0.5507396991835529,-0.26898827290236]]

<!-- record -->

<div class="button" onclick="startStopRec()" id="recordButton" style="background-color:#303030">● Record</div>

// https://medium.com/@amatewasu/how-to-record-a-canvas-element-d4d0826d3591

let canvas = test.display.ui.can

var videoStream = canvas.captureStream();
var mediaRecorder = new MediaRecorder(videoStream);

var chunks = [];

mediaRecorder.ondataavailable = function(e) {
    chunks.push(e.data);
};
mediaRecorder.onstop = function(e) {
    var blob = new Blob(chunks, { 'type' : 'video/mp4' });
    chunks = [];
    var videoURL = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.style = "display: none;";
    a.href = videoURL;
    a.download = "video.mp4";
    canvas.appendChild(a);
    a.click();
};
mediaRecorder.ondataavailable = function(e) {
    chunks.push(e.data);
};

function startStopRec()
{
    let rec = document.getElementById("recordButton")
    
    if(rec.innerHTML == "● Record")
    {
        mediaRecorder.start(200);
        rec.innerHTML = "■ Stop";
        rec.style.backgroundColor = "#ea584e";
        
        // log("started")
    }
    else
    {
        mediaRecorder.stop();
        rec.innerHTML = "● Record";
        rec.style.backgroundColor = "#ffffff31";
        
        // log("stoped")
    }
}

<!-- record -->



<!-- settings -->

<div class="box">
            <div class="card">
                
                <div class="cardHead">settings</div>
                
                <div class="divideSpace">
                    radius 
                    <input ontouchmove="vars.radius = this.value" id="radius" type="range" min="1" max="700" />
                </div>
                
                
                <div class="divider"></div>
                
                <div class="divideSpace">
                    particleScale 
                    <input ontouchmove="vars.particleScale = this.value" id="particleScale" type="range" min="0" max="1" step="any" />
                </div>
                
                <div class="divider"></div>
                
                <div class="divideSpace">
                    particleForceMid 
                    <input ontouchmove="vars.particleForceMid = this.value" id="particleForceMid" type="range" min="0" max="1" step="any" />
                </div>
                
                <div class="divider"></div>
                
                <div class="divideSpace">
                    valocity 
                    <input ontouchmove="vars.valocity = this.value" id="valocity" type="range" min="0" max="1" step="any" />
                </div>
                
                <div class="divider"></div>
                
                <div class="divideSpace">
                    noWall 
                    <input onchange="vars.noWall = this.checked" id="noWall" type="checkbox" min="0" max="1"/>
                </div>
                
                <div class="divider"></div>
                
                <div class="divideSpace">
                    centerParticles 
                    <input onchange="vars.centerParticles = this.checked" id="centerParticles" type="checkbox" min="0" max="1"/>
                </div>
                
                <div class="divider"></div>
                
                <div class="divideSpace">
                    particleCount 
                    <input onchange="vars.particleCount = this.value" id="particleCount" type="number" min="1" max="1000" />
                </div>
                
                <div class="divider"></div>
                
                <div class="divideSpace">
                    particleColorCount 
                    <input onchange="vars.particleColorCount = this.value" id="particleColorCount" type="number" min="1" max="10" />
                </div>
                
            </div>
        </div>
        
<!-- settings -->
        
                    let log = document.getElementById("log")
                    log.innerHTML = parseInt(log.innerHTML) +1
                    
        
        
        for(let p of par)
        {
            let frc = {x:0, y:0}
            
            for(let p2 of par2)
            {
                if(p.pos == p2.pos) continue;
                
                let a = p.pos
                let b = p2.pos
                
                let d = {x: a.x-b.x, y: a.y-b.y}
                let dist = Math.sqrt(d.x*d.x + d.y*d.y)
                
                let limit = p2.mass*170
                if(dist > 0 && dist <= limit)
                {
                    let size = ( (p2.mass*10)/2 + (p.mass*10)/2 ) *10
                    
                    let attrLen = dist - size
                    let mid = 0.5
                    let attrMid = attrLen*mid
                    
                    let attraction = 0 // 1-dist/limit
                    let repulstion = ((1-(dist/size)) * -1)
                    
                    if(attrLen <= attrMid)
                    {
                        attraction = dist/attrMid
                    }
                    else if(attrLen > attrMid)
                    {
                        attraction = 1-(attrLen-attrMid)/(limit-attrMid) // 1−((12−10)÷(20−10))
                    }
                    
                    attraction *= 1
                    repulstion *= 1
                    
                    let fr = g * p2.mass
                    
                    if(dist <= size) {frc.x += fr * repulstion * (d.x/dist) / p.mass}
                    else {frc.x += fr * attraction * (d.x/dist) / p.mass}
                    if(dist <= size) {frc.y += fr * repulstion * (d.y/dist) / p.mass}
                    else {frc.y += fr * attraction * (d.y/dist) / p.mass}
                    
                }
            }
            
            let velo = get.addPos(p.velo, frc)
            let mult = 0.5; velo.x *= mult; velo.y *= mult;
            let pos = get.addPos(p.pos, p.velo)
            
            if(pos.x < 0) { pos.x = 0; velo.x -= frc.x }
            if(pos.x > this.width) { pos.x = this.width; velo.x -= frc.x; }
            if(pos.y < 0) { pos.y = 0; velo.y -= frc.y}
            if(pos.y > this.height) { pos.y = this.height; velo.y -= frc.y; }
            
            p.velo = velo;
            p.pos = pos;
            
            if(p.pos.x <= 0 || p.pos.x >= this.width){p.velo.x *= -1}
            if(p.pos.y <= 0 || p.pos.y >= this.height){p.velo.y *= -1}
        }
        
    // no wall
    
    rule(par, par2, g)
    {
        let width = this.width
        let height = this.height
        
        for(let p of par)
        {
            let frc = {x:0, y:0}
            
            for(let p2 of par2)
            {
                if(p == p2) continue;
                
                let limit = p2.mass * 100
                
                let a = p.pos
                let bx = p2.pos.x
                let by = p2.pos.y
                
                if(a.x > width - limit && bx < limit) { bx += width }
                else if(a.x < limit && bx > width - limit) { bx -= width }
                if(a.y > height - limit && by < limit) { by += height }
                else if(a.y < limit && by > height - limit) { by -= height }
                
                let d = {x: (bx - a.x), y: (by - a.y)}
                let dist = Math.sqrt(d.x**2 + d.y**2)
                
                if(dist > 0 && dist <= limit)
                {
                    let size = ( (p2.mass*10)/2 + (p.mass*10)/2 ) *10
                    
                    let attrLen = dist - size
                    let mid = 0.5
                    let attrMid = attrLen*mid
                    
                    let attraction = 0 // 1-dist/limit
                    let repulstion = ((1-(dist/size)) * -1)
                    
                    if(attrLen <= attrMid)
                    {
                        attraction = dist/attrMid
                    }
                    else if(attrLen > attrMid)
                    {
                        attraction = 1-(attrLen-attrMid)/(limit-attrMid) // 1−((12−10)÷(20−10))
                    }
                    
                    attraction *= 1
                    repulstion *= 1
                    
                    let fr = g * p2.mass
                    
                    if(dist <= size) {frc.x += fr * repulstion * (d.x/dist) / p.mass}
                    else {frc.x += fr * attraction * (d.x/dist) / p.mass}
                    if(dist <= size) {frc.y += fr * repulstion * (d.y/dist) / p.mass}
                    else {frc.y += fr * attraction * (d.y/dist) / p.mass}
                    
                }
            }
            
            let velo = get.addPos(p.velo, frc)
            let mult = 0.5; velo.x *= mult; velo.y *= mult;
            let pos = get.addPos(p.pos, p.velo)
            
            if(pos.x < 0) { pos.x += width }
            if(pos.x > width) { pos.x -= width }
            if(pos.y < 0) { pos.y += height }
            if(pos.y > height) { pos.y -= height }
            
            p.velo = velo;
            p.pos = pos;
            
            // if(p.pos.x <= 0 || p.pos.x >= this.width){p.velo.x *= -1}
            // if(p.pos.y <= 0 || p.pos.y >= this.height){p.velo.y *= -1}
        }
    }
    
    
                // perfect attraction formula
    
                if(dist >= 0 && dist <= limit)
                {
                    let size = (p2.mass + p.mass)*10/2  
                    
                    let attrLen = limit - size
                    let mid = 0.5
                    let attrMid = attrLen*mid
                    let attrPos = dist - size
                    
                    let attraction = 0
                    let repulstion = ((1-(dist/size)) * -1)
                    
                    if(attrPos <= attrMid)
                    {
                        attraction = attrPos/attrMid
                    }
                    else if(attrPos > attrMid)
                    {
                        attraction = 1-(attrPos-attrMid)/(limit-attrMid) // 1−((12−10)÷(20−10))
                    }
                    
                    attraction *= 1
                    repulstion *= 1
                    
                    let fr = g * p2.mass
                    
                    if(dist <= size) {frc.x += fr * repulstion * (d.x/dist) / p.mass}
                    else             {frc.x += fr * attraction * (d.x/dist) / p.mass}
                    if(dist <= size) {frc.y += fr * repulstion * (d.y/dist) / p.mass}
                    else             {frc.y += fr * attraction * (d.y/dist) / p.mass}
                    
                }
    
        let yellow = this.yellow;
        let red = this.red;
        let green = this.green;
        
        this.rule(yellow, red, -1)
        this.rule(red, yellow, -1)
        this.rule(yellow, yellow, 1)
        this.rule(red, red, 1)
        
        // velo 0.9
        this.rule(red, red, -0.1)
        this.rule(red, yellow, -0.02)
        this.rule(yellow, red, 0.02)
        //new addup
        this.rule(green, green, -0.07)
        this.rule(green, red, -0.02)
        this.rule(red, green, -0.01)
        
        // fly
        this.rule(green, green, -0.32)
        this.rule(green, red, -0.17)
        this.rule(green, yellow, 0.34)
        this.rule(red, red, -0.10)
        this.rule(red, green, -0.34)
        this.rule(yellow, yellow, 0.15)
        this.rule(yellow, green, -0.20)
        // worst
        this.rule(red, red, 0.1)
        this.rule(yellow, red, 0.15)
        this.rule(green, green, -0.7)
        this.rule(green, red, -0.2)
        this.rule(red, green, -0.1)
        
        
        
                // old force
                
                if(dist > 0 && dist < 100)
                {
                    let fr = (g * p2.mass / dist)
                    frc.x += (fr * d.x)
                    frc.y += (fr * d.y)
                    
                    if(dist <= p2.mass*10){frc.x *= -1}
                    if(dist <= p2.mass*10){frc.y *= -1}
                }
                
                
                // new force 
                
                let limit = 100
                
                if(dist > 0 && dist < limit)
                {
                    let attraction = 1-dist/limit
                    let repulstion = 1-dist/(p.mass*10) * -1
                    
                    let fr = g * p2.mass
                    
                    // frc.x += fr * attraction * (d.x/dist) / p.mass
                    // frc.y += fr * attraction * (d.y/dist) / p.mass
                    
                    if(dist <= p.mass*10) {frc.x += fr * repulstion * (d.x/dist) / p.mass}
                    else {frc.x += fr * attraction * (d.x/dist) / p.mass}
                    if(dist <= p.mass*10) {frc.y += fr * repulstion * (d.y/dist) / p.mass}
                    else {frc.y += fr * attraction * (d.y/dist) / p.mass}
                    
                }
                
                
                // new v2
                
                let limit = p2.mass*170
                if(dist > 0 && dist < limit)
                {
                    let size = p.mass*10
                    
                    let attrLen = dist - size
                    let mid = 0.5;
                    let attrMid = attrLen*mid
                    
                    let attraction = 0 // 1-dist/limit
                    let repulstion = ((1-(dist/size)) * -1) * 10
                    
                    if(dist+size <= attrMid)
                    {
                        attraction = dist/attrMid
                    }
                    else if(dist+size > attrMid)
                    {
                        attraction = 1-(dist+size-attrMid)/(limit-attrMid) // 1−((12−10)÷(20−10))
                    }
                    
                    let fr = g * p2.mass
                    
                    if(dist <= p.mass*10) {frc.x += fr * repulstion * (d.x/dist) / p.mass}
                    else {frc.x += fr * attraction * (d.x/dist) / p.mass}
                    if(dist <= p.mass*10) {frc.y += fr * repulstion * (d.y/dist) / p.mass}
                    else {frc.y += fr * attraction * (d.y/dist) / p.mass}
                    
                }
                
                
        
        this.yellow = this.createParticles(count, this.randomColor()) //"#c1be71")
        this.red = this.createParticles(count, this.randomColor()) //"#ce8856")
        this.green = this.createParticles(count, this.randomColor()) //"#7b9f5d")
        this.cyan = this.createParticles(count, this.randomColor()) //"#5d8cb9")
        this.white = this.createParticles(count, this.randomColor()) //"grey")
        this.brown = this.createParticles(count, this.randomColor()) //"brown")
        
*/
